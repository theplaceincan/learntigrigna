<script setup>
import { ref, onMounted, onUnmounted, computed, watch } from 'vue';
import { useRoute, useRouter } from 'vue-router';
import pb from '../composables/usePocketBase'
import { darkTheme, websiteTheme, changeTheme } from '../globalvariables';

const model = computed(() => pb.authStore.record);
const route = useRoute();
const router = useRouter();
const isAuthenticated = ref(pb.authStore.record !== null);

let registrationView = ref(0);
let passwordResetInfo = ref(false);

let cName = ref("");
let cUsername = ref("");
let cEmail = ref("");
let cPassword = ref("");
let cConfirmPassword = ref("");
let sEmail = ref("");
let sPassword = ref("");
let rEmail = ref("");

// Password Reset
const resetPasswordForm = () => {
    if (!rEmail.value) {
        alert('Password or Email is not complete.');
        return;
    }
    resetPassword({ email: rEmail.value });
}
async function resetPassword(resetData) {
    try {
        await pb.collection('users').requestPasswordReset(resetData.email);
    } catch (error) {
        console.log(error)
    }
    passwordResetInfo.value = true
}

// Sign In
const signInForm = () => {
    if (!sEmail.value || !sPassword.value) {
        alert('Password or Email is not complete.');
        return;
    }
    signIn({ email: sEmail.value, password: sPassword.value });
};
async function signIn(signInData) {
    try {
        const record = await pb.collection('users').authWithPassword(signInData.email, signInData.password);
        router.push('/')
    } catch (error) {
        alert(error.message)
    }
}

// Create account

const createAccForm = () => {
    if (!cEmail.value || !cPassword.value || !cUsername.value) {
        alert('Please fill the form.');
        return;
    }
    if (cPassword.value !== cConfirmPassword.value) {
        alert('Please ensure that passwords match.');
        return;
    }
    createAccount({ email: cEmail.value, password: cPassword.value, username: cUsername.value });
}
async function createAccount({ username, email, password }) {
    console.log("username value:", username);
    console.log("email value:", email);
    console.log("password value:", password);
    try {
        const data = {
            "username": username,
            "email": email,
            "emailVisibility": true,
            "password": password,
            "passwordConfirm": password,
            "xp": 0,
            "level": 1
        };
        const record = await pb.collection('users').create(data);
        signIn({ email, password })
    } catch (error) {
        alert(error.message)
    }
}

onMounted(() => {
  // Updates isAuthenticated automatically
  pb.authStore.onChange(() => {
    isAuthenticated.value = pb.authStore.record !== null;
  });
});
</script>

<!-- :class="`theme-${websiteTheme} text-bgPrimary`" -->
<!-- :class="`theme-${websiteTheme} w-72 greenButtonTheme p-3 px-6 rounded-md text-white font-semibold`" -->

<template>
<div class="min-h-[100vh] flex items-center justify-center">
  <div v-if="registrationView === 0" class="flex flex-col items-center w-full">
    <p :class="`theme-${websiteTheme} text-secondaryText pointer-events-none font-semibold text-xl`">Create an account</p>
      <div class="space-y-1 max-w-[280px] my-2">
        <input v-model="cUsername" :class="`theme-${websiteTheme} inputCSS placeholder:text-quaternaryText`" type="text" placeholder="Username">
        <input v-model="cEmail" :class="`theme-${websiteTheme} inputCSS placeholder:text-quaternaryText`" type="email" placeholder="Email">
        <input v-model="cPassword" :class="`theme-${websiteTheme} inputCSS placeholder:text-quaternaryText`" type="password" placeholder="Password">
        <input v-model="cConfirmPassword" :class="`theme-${websiteTheme} inputCSS placeholder:text-quaternaryText`" type="password" placeholder="Confirm password">
      </div>
      <div>
        <button @click.prevent="createAccForm(cUsername, cEmail, cPassword, cConfirmPassword)" class="greenButtonTheme w-full largeBtn">Create Account</button>
      </div>
      <div class="my-5">
        <a @click="registrationView = 1" :class="`theme-${websiteTheme} text-quaternaryText linkBtn`">Have an account? Sign In!</a>
      </div>
  </div>
  <div v-if="registrationView === 1" class="flex flex-col items-center w-full">
    <p :class="`theme-${websiteTheme} text-secondaryText pointer-events-none font-semibold text-xl`">Sign In</p>
      <div class="space-y-1 max-w-[280px] my-2">
        <input v-model="sEmail" :class="`theme-${websiteTheme} inputCSS placeholder:text-quaternaryText`" type="email" placeholder="Email">
        <input v-model="sPassword" :class="`theme-${websiteTheme} inputCSS placeholder:text-quaternaryText`" type="password" placeholder="Password">
      </div>
      <div>
        <button @click.prevent="signInForm(sEmail, sPassword)" class="greenButtonTheme w-full largeBtn">Sign In</button>
      </div>
      <div class="my-5 flex flex-col items-center space-y-1">
        <a @click="registrationView = 0" :class="`theme-${websiteTheme} text-quaternaryText linkBtn`">Need a new account? Create one!</a>
        <a @click="registrationView = 2" :class="`theme-${websiteTheme} text-quaternaryText linkBtn`">Forgot your password? Reset it.</a>
    </div>
  </div>
  <div v-if="registrationView === 2" class="flex flex-col items-center w-full">
    <p :class="`theme-${websiteTheme} text-secondaryText pointer-events-none font-semibold text-xl`">Password Reset</p>
      <div class="space-y-1 w-[280px] my-2">
        <input v-model="rEmail" :class="`theme-${websiteTheme} inputCSS placeholder:text-quaternaryText`" type="email" placeholder="Email">
      </div>
      <div>
        <button @click.prevent="resetPasswordForm(rEmail)" class="orangeButtonTheme w-full largeBtn">Request Reset Email</button>
      </div>
     <div v-if="passwordResetInfo" :class="`theme-${websiteTheme} bg-secondary p-2 rounded-md my-2 w-[280px]`">
      <p :class="`theme-${websiteTheme} text-tertiaryText text-sm text-center italic`">If your account exists, we'll send you a password reset email. This might take a minute or so. Check spam folder if you cannot find the email.</p>
     </div>
      <div class="my-5">
        <a @click="registrationView = 1" :class="`theme-${websiteTheme} text-quaternaryText linkBtn`">Return to Sign In</a>
    </div>
  </div>
</div>
</template>

<style scoped>
</style>
