<script setup>
import { ref, onMounted, onUnmounted, computed, watch } from 'vue';
import { useRoute, useRouter } from 'vue-router';
import pb from '../composables/usePocketBase'
import { darkTheme, websiteTheme, changeTheme } from '../globalvariables';

const model = computed(() => pb.authStore.record);
const route = useRoute();
const router = useRouter();
const isAuthenticated = ref(pb.authStore.record !== null);

let helloMsgPop = ref(false);

// Handling welcome screen
let welcomeScreen = ref()
const currentTime = new Date()
const creationTime = new Date(model.value.created)
if (currentTime - creationTime < 30000) {
  welcomeScreen.value = true
} else {
  welcomeScreen.value = false
}
setTimeout(() => {
  welcomeScreen.value = false;
}, 2500);

// Rewards
const titles = ([
  { level: 0, title: "Beginner" },
  { level: 2, title: "Tigrigna Apprentice" },
  { level: 4, title: "Tigrigna Learner" },
  { level: 6, title: "Tigrigna Enthusiast" },
  { level: 8, title: "Tigrigna Explorer" },
  { level: 10, title: "Tigrigna Scholar" },
])
let rewardLevelShow = ref(
  Array(model.value.level)
    .fill(model.value.level)
    .map((_, i) => model.value.level - i)
);

// Function for fetching data
let LessonsList = ref([]);
let ChaptersList = ref([]);
let PhrasesAndWords = ref([]);
let Games = ref([]);
let LearningPlanJSON = ref({
  "chapters": []
});

async function findLessonByID(_id) {
  const lessonData = await pb.collection('lessonplan').getOne(_id, {});
  return {
    lesson_name: lessonData.lesson_name,
    url: lessonData.url,
    description: lessonData.description,
    chapter_id: lessonData.chapter_id,
    chapter_num: lessonData.chapter_num,
  };
}

async function getData() {
  const recById = await pb.collection('chaptersplan').getFullList({ sort: '-created' });

  // Loop through chapters and lessons
  for (let chapter of recById) {
    LearningPlanJSON.value.chapters.push({
      chapter: chapter.chapter,
      color: "red",
      chapter_num: chapter.chapter_num,
      lessons: [],
    });
    // console.log(`Chapter color: ${chapter.color}`);
    
    const chapterIndex = LearningPlanJSON.value.chapters.length - 1;
    const lessonPromises = chapter.lessons.map(async lessonId => {
      const lessonData = await findLessonByID(lessonId);
      LearningPlanJSON.value.chapters[chapterIndex].lessons.push(lessonData);
    });

    // Wait for all lessons to be fetched
    await Promise.all(lessonPromises);
  }

  PhrasesAndWords.value = await pb.collection("wordslist").getFullList({ sort: "-created" });
  Games.value = await pb.collection("gameCards").getFullList({ sort: "-created" });
}



onMounted(() => {
  getData();
  pb.authStore.onChange(() => {
    isAuthenticated.value = pb.authStore.record !== null;
  });
});
</script>

<!-- :class="`theme-${websiteTheme}`" -->
<!-- 58.67 -->
<!-- <div :class="`theme-${websiteTheme} bg-bgSecondary rounded-xl p-2 w-full`"> -->
<!-- :class="`theme-${websiteTheme} `" -->
<!-- :href="`/${e.ref}`" -->
<!-- disabledLesson -->

<template>
  <div v-if="welcomeScreen"
    :class="`fadeInOutWelcomeMsg theme-${websiteTheme} h-[100vh] w-full bg-bgPrimary absolute flex items-center justify-center`">
    <p :class="`theme-${websiteTheme} text-primaryText text-xl font-semibold`">Selam {{ model.username }}!</p>
  </div>
  <div :class="`theme-${websiteTheme} h-[58.67px]`"></div>
  <div class="w-full p-5 min-h-[100vh] flex flex-col sm:flex-row fadeInOutMainPage">
    <div :class="`theme-${websiteTheme} bg-bgSecondary rounded-xl p-2 w-full`">
      <div :class="` space-x-2 theme-${websiteTheme} text-primaryText flex text-3xl font-bold`">
        <p class="helloMessageAnimate" @mouseover="helloMsgPop = true" @mouseleave="helloMsgPop = false">
          <span v-if="!helloMsgPop">ሰላም </span><span v-if="helloMsgPop">Hello </span>
        </p>
        <p> {{ model.username }}!</p>
      </div>
      <p :class="`theme-${websiteTheme} text-tertiaryText font-semibold`">{{ model.email }}</p>
      <div class="---homeBorder--- my-2"></div>
      <div class="font-bold">
        <p :class="`theme-${websiteTheme} text-xl text-secondaryText `">📈 Level <span
            class="text-green-500 text-2xl">{{ model.level }}</span></p>
        <p :class="`theme-${websiteTheme} text-secondaryText flex items-center`">🏆<span
            class="text-yellow-500 ml-1 text-2xl"> {{ model.xp }} XP</span></p>
        <p :class="`theme-${websiteTheme} text-cyan-500 flex items-center`">
          {{ titles.find((title, ti) => {
            if (ti === titles.length - 1) return true
            return title.level <= model.level && titles[ti + 1].level >= model.level
          }).title }}
        </p>
      </div>
      <div class="---homeBorder--- my-2"></div>
      <div class="lg:flex lg:space-x-2 max-w-[700px]">
        <a href="/fidel"><button class="my-1 w-full alphabetButton menuButton">🔤 Alphabet 🔤 </button></a>
        <a href="/achivements"><button class="my-1 w-full menuButton">🏆 Achivements 🏆</button></a>
        <a href="/leaderboard"><button class="my-1 w-full menuButton">📊 Leaderboard 📊</button></a>
      </div>
      <div class="---homeBorder--- my-2"></div>
      <div class="p-3">
        <p :class="`theme-${websiteTheme} text-primaryText text-2xl text-center font-semibold mb-2`">🚀 Learn
          Tigrigna!
          🚀</p>
        <div class="flex flex-col overflow-y-scroll">
          <div :class="`theme-${websiteTheme} my-2`" v-for="chapter in LearningPlanJSON.chapters">
            <div :class="`theme-${websiteTheme} text-primaryText font-semibold text-xl`" class="flex space-x-2">
              <p>Chapter {{ chapter.chapter_num }}: </p>
              <p>{{ chapter.chapter }}</p>
            </div>
            <div>
              <a :href="lesson.url" v-for="lesson in chapter.lessons">
                <button :class="`theme-${websiteTheme} bg-${chapter.color}-500/20 hover:bg-${chapter.color}-500/40 active:bg-${chapter.color}-500/50 transition ease-in-out w-full rounded-full my-2 border border-tertiary p-2`">
                  <p :class="`theme-${websiteTheme} text-primaryText font-semibold text-lg`">{{ lesson.lesson_name }}</p>
                </button>
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="p-2"></div>
    <div :class="`theme-${websiteTheme} bg-bgSecondary rounded-xl p-2 w-full`">
      <!-- <div>
          <p :class="`theme-${websiteTheme} text-primaryText text-2xl text-center font-semibold mb-2`">🎮 Games
            🎮</p>
          <p :class="`theme-${websiteTheme} text-sm text-quaternaryText text-center font-semibold italic`">Earn XP by
            playing games and getting good at them!</p>
          <div class="flex flex-wrap justify-center">
            <a target="_blank" :href="`${e.href}`"
              :class="`m-1 theme-${websiteTheme} text-left p-2 transition ease-in-out hover:bg-tertiary active:bg-secondary rounded-2xl`"
              v-for="e in Games">
              <img class="w-72 mb-1 rounded-xl"
                :src="`https://learntigrigna.pockethost.io/api/files/${e.collectionId}/${e.id}/${e.gameImage}`">
              <p :class="`theme-${websiteTheme} text-primaryText font-semibold`">{{ e.gameTitle }}</p>
            </a>
          </div>
        </div>
        <div class="---homeBorder--- my-2"></div> -->
      <div class="">
        <p :class="`theme-${websiteTheme} text-primaryText text-2xl text-center font-semibold mb-2`">📒 Phrases and
          Words
          📒</p>
        <div :class="`flex flex-col items-center justify-center w-full mb-2`">
          <input :class="`theme-${websiteTheme} inputCSS w-[300px] placeholder:text-quaternaryText`"
            placeholder="Find a word or phrase">
        </div>
        <div class="flex flex-wrap justify-center">
          <div
            :class="`flex w-[350px] items-center theme-${websiteTheme} bg-primary border border-tertiary m-2 p-2 rounded-md`"
            v-for="e in PhrasesAndWords">
            <div class="w-[50%]">
              <p :class="`theme-${websiteTheme} text-primaryText font-semibold text-lg`">{{ e.tigrignaWord }}</p>
              <p :class="`theme-${websiteTheme} text-tertiaryText`">"{{ e.tigrignaSound }}"</p>
              <p :class="`theme-${websiteTheme} text-secondaryText`">{{ e.tigrignaEnglish }}</p>
              <button class="audioButton">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                  stroke="currentColor" class="size-6">
                  <path stroke-linecap="round" stroke-linejoin="round"
                    d="M19.114 5.636a9 9 0 0 1 0 12.728M16.463 8.288a5.25 5.25 0 0 1 0 7.424M6.75 8.25l4.72-4.72a.75.75 0 0 1 1.28.53v15.88a.75.75 0 0 1-1.28.53l-4.72-4.72H4.51c-.88 0-1.704-.507-1.938-1.354A9.009 9.009 0 0 1 2.25 12c0-.83.112-1.633.322-2.396C2.806 8.756 3.63 8.25 4.51 8.25H6.75Z" />
                </svg>
              </button>
            </div>
            <div class="w-[50%] flex justify-center">
              <img class="w-28"
                :src="`https://learntigrigna.pockethost.io/api/files/${e.collectionId}/${e.id}/${e.tigrignaImage}`">
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<style scoped>
.menuButton {
  padding: 3px;
  padding-left: 9px;
  padding-right: 9px;
  border-radius: 6px;
  font-weight: 700;
  transition: background-color 0.2s ease;
  color: var(--color-secondaryText);
  background-color: var(--color-tertiary);
}

.menuButton:hover {
  background-color: var(--color-quaternary);
}

.menuButton:active {
  background-color: var(--color-quinary);
}

.alphabetButton {
  animation-name: alphabetButtonA;
  animation-duration: 10s;
  animation-iteration-count: infinite;
  transition: background-color 0.2s ease;
}

.alphabetButton:hover {
  animation: none;
  background-color: var(--color-quaternary);
}

.alphabetButton:active {
  animation: none;
  background-color: var(--color-quinary);
}

@keyframes alphabetButtonA {
  0% {
    background-color: rgba(226, 0, 0, .5);
  }

  25% {
    background-color: rgba(238, 155, 0, .5);
  }

  50% {
    background-color: rgba(0, 148, 0, .5);
  }

  75% {
    background-color: rgba(42, 81, 255, .5);
  }

  100% {
    background-color: rgba(226, 0, 0, .5);
  }
}

.rewardDimensions {
  height: 6rem;
  width: 6rem;
}

@media (min-width: 640px) {
  .---homeBorder--- {
    padding-top: 4px;
    padding-bottom: 4px;
    border-radius: 0.75rem;
    background-color: var(--color-secondary)
  }
}

.helloMessageAnimate {
  animation: popOutText 1s ease;
}

@keyframes popOutText {
  0% {
    scale: 1;
    text-decoration: none !important;
  }

  50% {
    transform: rotate(-3deg);
    scale: 1.3;
    background: linear-gradient(-15deg, #ffbf00, #ff820e, #0eff32);
    color: white;
    border-radius: 7px;
    padding: 9px;
    text-decoration: none !important;
  }

  100% {
    scale: 1;
    text-decoration: none !important;
  }
}


.fadeInOutWelcomeMsg {
  opacity: 0;
  animation-name: fadeInOutWelcomeMsg;
  animation-duration: 6s;
}

@keyframes fadeInOutWelcomeMsg {
  0% {
    opacity: 1;
  }

  25% {
    opacity: 1;
  }

  50% {
    opacity: 0;
  }

  100% {
    opacity: 0;
  }
}

.mainPage {
  opacity: 1;
  animation-name: fadeInOutMainPage;
  animation-duration: 8s;
}

@keyframes fadeInOutMainPage {
  0% {
    opacity: 0;
    pointer-events: none;
  }

  25% {
    opacity: 0;
    pointer-events: auto;
  }

  50% {
    opacity: 0;
    pointer-events: auto;
  }

  100% {
    opacity: 1;
    pointer-events: auto;
  }
}
</style>
